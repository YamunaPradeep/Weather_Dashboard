Complete Step-by-Step Java Weather App Tutorial üöÄ
I'll guide you through everything from scratch! Let's build a professional weather app that will impress recruiters.
Phase 1: Environment Setup üîß
Step 1: Install Java Development Kit (JDK)

Download JDK 17 (LTS version)

Go to: https://adoptium.net/
Download Eclipse Temurin 17
Choose your OS (Windows/Mac/Linux)


Install and Verify
bash# After installation, open terminal/command prompt
java -version
javac -version
You should see Java 17 information

Step 2: Install IDE (IntelliJ IDEA)

Download IntelliJ IDEA Community (Free)

Go to: https://www.jetbrains.com/idea/download/
Choose Community Edition (Free)


Install and Setup

Install with default settings
Open IntelliJ IDEA
Skip importing settings (first time)



Step 3: Install Additional Tools

Postman (API Testing)

Download from: https://www.postman.com/downloads/
Install for API testing


Git (Version Control)

Download from: https://git-scm.com/
Install with default settings



Phase 2: Project Creation üèóÔ∏è
Step 4: Create Spring Boot Project

Go to Spring Initializr

Open browser: https://start.spring.io/


Configure Project
Project: Maven
Language: Java
Spring Boot: 3.2.0 (latest stable)

Project Metadata:
Group: com.weatherapp
Artifact: weather-dashboard
Name: weather-dashboard
Description: Professional Weather Application
Package name: com.weatherapp.weatherdashboard
Packaging: Jar
Java: 17

Add Dependencies
Click "Add Dependencies" and add:

Spring Web
Spring Data JPA
MySQL Driver
Spring Security
Spring Boot DevTools
Validation
Spring Cache Abstraction


Generate Project

Click "Generate"
Download the ZIP file
Extract to a folder like C:\Projects\weather-dashboard



Step 5: Open Project in IntelliJ

Open IntelliJ IDEA
Open Project

Click "Open"
Navigate to your extracted folder
Select the folder containing pom.xml
Click "Open"


Wait for Setup

IntelliJ will download dependencies (takes 2-5 minutes)
You'll see progress in the bottom status bar



Phase 3: Database Setup üóÑÔ∏è
Step 6: Install MySQL

Download MySQL

Go to: https://dev.mysql.com/downloads/installer/
Download MySQL Installer for Windows


Install MySQL

Run installer
Choose "Developer Default"
Set root password: password123 (remember this!)
Complete installation


Verify Installation
bashmysql -u root -p
# Enter password: password123


Step 7: Create Database

Open MySQL Command Line or MySQL Workbench
Create Database
sqlCREATE DATABASE weather_app;
USE weather_app;


Phase 4: Backend Development üíª
Step 8: Configure Application Properties

Open src/main/resources/application.properties
Replace content with:
application.propertiesCode¬†# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/weather_app
spring.datasource.username=root
spring.datasource.password=password123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate Configuration
Step 9: Create Entity Classes

Create package structure:

Right-click on com.weatherapp.weatherdashboard
New ‚Üí Package ‚Üí Name: entity


Create User Entity:
User.javaCode¬†package com.weatherapp.weatherdashboard.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import java.time.LocalDateTime;
import java.util.Set;

@Entity
@Table(name = "
Create SavedLocation Entity:
SavedLocation.javaCode¬†package com.weatherapp.weatherdashboard.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import java.time.LocalDateTime;

@Entity
@Table(name = "saved_locations")
public class SavedLocation {
    
    @Id
    @GeStep 10: Create Repository Interfaces

Create package: repository
Create UserRepository:
UserRepository.javaCode¬†package com.weatherapp.weatherdashboard.repository;

import com.weatherapp.weatherdashboard.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.da
Create SavedLocationRepository:
SavedLocationRepository.javaCode¬†package com.weatherapp.weatherdashboard.repository;

import com.weatherapp.weatherdashboard.entity.SavedLocation;
import com.weatherapp.weatherdashboard.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframeStep 11: Get Weather API Key

Sign up for OpenWeatherMap API

Go to: https://openweathermap.org/api
Click "Sign Up"
Create free account
Go to "API Keys" section
Copy your API key


Update application.properties

Replace your-api-key-here with your actual API key



Next Steps Preview üéØ
I've set up the foundation with:

‚úÖ Environment setup
‚úÖ Project creation
‚úÖ Database configuration
‚úÖ Entity classes
‚úÖ Repository interfaces

Next, I'll teach you:

DTOs and Models - Data transfer objects
Service Layer - Business logic
Controller Layer - REST APIs
Security Configuration - JWT authentication
Weather API Integration - External API calls
Frontend Integration - React/Thymeleaf
Testing - Unit and integration tests
Deployment - Docker and cloud deployment

Before we continue, please:

Complete the setup steps above
Ensure your project runs without errors
Get your OpenWeatherMap API key
Let me know if you encounter any issues

To test your setup:

Run the application (green play button in IntelliJ)
You should see Spring Boot starting in the console
No errors should appear

Ready for the next phase? Let me know how the setup went! üöÄ
